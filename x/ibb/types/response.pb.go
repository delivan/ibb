// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibb/response.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type LoadPoolResponse struct {
	Asset            string `protobuf:"bytes,1,opt,name=Asset,proto3" json:"Asset,omitempty"`
	CollatoralFactor int32  `protobuf:"varint,2,opt,name=CollatoralFactor,proto3" json:"CollatoralFactor,omitempty"`
	Liquidity        int32  `protobuf:"varint,3,opt,name=Liquidity,proto3" json:"Liquidity,omitempty"`
	DepositApy       int32  `protobuf:"varint,4,opt,name=DepositApy,proto3" json:"DepositApy,omitempty"`
	BorrowApy        int32  `protobuf:"varint,5,opt,name=BorrowApy,proto3" json:"BorrowApy,omitempty"`
	AssetPrice       int32  `protobuf:"varint,6,opt,name=AssetPrice,proto3" json:"AssetPrice,omitempty"`
}

func (m *LoadPoolResponse) Reset()         { *m = LoadPoolResponse{} }
func (m *LoadPoolResponse) String() string { return proto.CompactTextString(m) }
func (*LoadPoolResponse) ProtoMessage()    {}
func (*LoadPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d3e4899842c994, []int{0}
}
func (m *LoadPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadPoolResponse.Merge(m, src)
}
func (m *LoadPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoadPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoadPoolResponse proto.InternalMessageInfo

func (m *LoadPoolResponse) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *LoadPoolResponse) GetCollatoralFactor() int32 {
	if m != nil {
		return m.CollatoralFactor
	}
	return 0
}

func (m *LoadPoolResponse) GetLiquidity() int32 {
	if m != nil {
		return m.Liquidity
	}
	return 0
}

func (m *LoadPoolResponse) GetDepositApy() int32 {
	if m != nil {
		return m.DepositApy
	}
	return 0
}

func (m *LoadPoolResponse) GetBorrowApy() int32 {
	if m != nil {
		return m.BorrowApy
	}
	return 0
}

func (m *LoadPoolResponse) GetAssetPrice() int32 {
	if m != nil {
		return m.AssetPrice
	}
	return 0
}

type LoadUserResponse struct {
	AssetApy     int32  `protobuf:"varint,1,opt,name=AssetApy,proto3" json:"AssetApy,omitempty"`
	AssetDenom   string `protobuf:"bytes,2,opt,name=AssetDenom,proto3" json:"AssetDenom,omitempty"`
	AssetBalance int64  `protobuf:"varint,3,opt,name=AssetBalance,proto3" json:"AssetBalance,omitempty"`
	AssetDeposit int32  `protobuf:"varint,4,opt,name=AssetDeposit,proto3" json:"AssetDeposit,omitempty"`
	AssetBorrow  int32  `protobuf:"varint,5,opt,name=AssetBorrow,proto3" json:"AssetBorrow,omitempty"`
	AssetPrice   int32  `protobuf:"varint,6,opt,name=AssetPrice,proto3" json:"AssetPrice,omitempty"`
	Collateral   bool   `protobuf:"varint,7,opt,name=Collateral,proto3" json:"Collateral,omitempty"`
}

func (m *LoadUserResponse) Reset()         { *m = LoadUserResponse{} }
func (m *LoadUserResponse) String() string { return proto.CompactTextString(m) }
func (*LoadUserResponse) ProtoMessage()    {}
func (*LoadUserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d3e4899842c994, []int{1}
}
func (m *LoadUserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoadUserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoadUserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoadUserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoadUserResponse.Merge(m, src)
}
func (m *LoadUserResponse) XXX_Size() int {
	return m.Size()
}
func (m *LoadUserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoadUserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoadUserResponse proto.InternalMessageInfo

func (m *LoadUserResponse) GetAssetApy() int32 {
	if m != nil {
		return m.AssetApy
	}
	return 0
}

func (m *LoadUserResponse) GetAssetDenom() string {
	if m != nil {
		return m.AssetDenom
	}
	return ""
}

func (m *LoadUserResponse) GetAssetBalance() int64 {
	if m != nil {
		return m.AssetBalance
	}
	return 0
}

func (m *LoadUserResponse) GetAssetDeposit() int32 {
	if m != nil {
		return m.AssetDeposit
	}
	return 0
}

func (m *LoadUserResponse) GetAssetBorrow() int32 {
	if m != nil {
		return m.AssetBorrow
	}
	return 0
}

func (m *LoadUserResponse) GetAssetPrice() int32 {
	if m != nil {
		return m.AssetPrice
	}
	return 0
}

func (m *LoadUserResponse) GetCollateral() bool {
	if m != nil {
		return m.Collateral
	}
	return false
}

type UserAssetBalances struct {
	Uakt  int64 `protobuf:"varint,1,opt,name=Uakt,proto3" json:"Uakt,omitempty"`
	Uatom int64 `protobuf:"varint,2,opt,name=Uatom,proto3" json:"Uatom,omitempty"`
	Ucro  int64 `protobuf:"varint,3,opt,name=Ucro,proto3" json:"Ucro,omitempty"`
	Udvpn int64 `protobuf:"varint,4,opt,name=Udvpn,proto3" json:"Udvpn,omitempty"`
	Uiris int64 `protobuf:"varint,5,opt,name=Uiris,proto3" json:"Uiris,omitempty"`
	Uxprt int64 `protobuf:"varint,6,opt,name=Uxprt,proto3" json:"Uxprt,omitempty"`
}

func (m *UserAssetBalances) Reset()         { *m = UserAssetBalances{} }
func (m *UserAssetBalances) String() string { return proto.CompactTextString(m) }
func (*UserAssetBalances) ProtoMessage()    {}
func (*UserAssetBalances) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d3e4899842c994, []int{2}
}
func (m *UserAssetBalances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserAssetBalances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserAssetBalances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserAssetBalances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserAssetBalances.Merge(m, src)
}
func (m *UserAssetBalances) XXX_Size() int {
	return m.Size()
}
func (m *UserAssetBalances) XXX_DiscardUnknown() {
	xxx_messageInfo_UserAssetBalances.DiscardUnknown(m)
}

var xxx_messageInfo_UserAssetBalances proto.InternalMessageInfo

func (m *UserAssetBalances) GetUakt() int64 {
	if m != nil {
		return m.Uakt
	}
	return 0
}

func (m *UserAssetBalances) GetUatom() int64 {
	if m != nil {
		return m.Uatom
	}
	return 0
}

func (m *UserAssetBalances) GetUcro() int64 {
	if m != nil {
		return m.Ucro
	}
	return 0
}

func (m *UserAssetBalances) GetUdvpn() int64 {
	if m != nil {
		return m.Udvpn
	}
	return 0
}

func (m *UserAssetBalances) GetUiris() int64 {
	if m != nil {
		return m.Uiris
	}
	return 0
}

func (m *UserAssetBalances) GetUxprt() int64 {
	if m != nil {
		return m.Uxprt
	}
	return 0
}

type Liquidation struct {
	WalletAddress    string              `protobuf:"bytes,1,opt,name=WalletAddress,proto3" json:"WalletAddress,omitempty"`
	LiquidationAsset []*LiquidationAsset `protobuf:"bytes,2,rep,name=LiquidationAsset,proto3" json:"LiquidationAsset,omitempty"`
}

func (m *Liquidation) Reset()         { *m = Liquidation{} }
func (m *Liquidation) String() string { return proto.CompactTextString(m) }
func (*Liquidation) ProtoMessage()    {}
func (*Liquidation) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d3e4899842c994, []int{3}
}
func (m *Liquidation) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Liquidation) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Liquidation.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Liquidation) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Liquidation.Merge(m, src)
}
func (m *Liquidation) XXX_Size() int {
	return m.Size()
}
func (m *Liquidation) XXX_DiscardUnknown() {
	xxx_messageInfo_Liquidation.DiscardUnknown(m)
}

var xxx_messageInfo_Liquidation proto.InternalMessageInfo

func (m *Liquidation) GetWalletAddress() string {
	if m != nil {
		return m.WalletAddress
	}
	return ""
}

func (m *Liquidation) GetLiquidationAsset() []*LiquidationAsset {
	if m != nil {
		return m.LiquidationAsset
	}
	return nil
}

type LiquidationAsset struct {
	Asset  string `protobuf:"bytes,1,opt,name=Asset,proto3" json:"Asset,omitempty"`
	Amount int64  `protobuf:"varint,2,opt,name=Amount,proto3" json:"Amount,omitempty"`
}

func (m *LiquidationAsset) Reset()         { *m = LiquidationAsset{} }
func (m *LiquidationAsset) String() string { return proto.CompactTextString(m) }
func (*LiquidationAsset) ProtoMessage()    {}
func (*LiquidationAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_65d3e4899842c994, []int{4}
}
func (m *LiquidationAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidationAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidationAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidationAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidationAsset.Merge(m, src)
}
func (m *LiquidationAsset) XXX_Size() int {
	return m.Size()
}
func (m *LiquidationAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidationAsset.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidationAsset proto.InternalMessageInfo

func (m *LiquidationAsset) GetAsset() string {
	if m != nil {
		return m.Asset
	}
	return ""
}

func (m *LiquidationAsset) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

func init() {
	proto.RegisterType((*LoadPoolResponse)(nil), "sapienscosmos.ibb.ibb.LoadPoolResponse")
	proto.RegisterType((*LoadUserResponse)(nil), "sapienscosmos.ibb.ibb.LoadUserResponse")
	proto.RegisterType((*UserAssetBalances)(nil), "sapienscosmos.ibb.ibb.UserAssetBalances")
	proto.RegisterType((*Liquidation)(nil), "sapienscosmos.ibb.ibb.Liquidation")
	proto.RegisterType((*LiquidationAsset)(nil), "sapienscosmos.ibb.ibb.LiquidationAsset")
}

func init() { proto.RegisterFile("ibb/response.proto", fileDescriptor_65d3e4899842c994) }

var fileDescriptor_65d3e4899842c994 = []byte{
	// 498 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x41, 0x8b, 0x13, 0x3f,
	0x18, 0xc6, 0x9b, 0xed, 0xb6, 0xff, 0x6d, 0xfa, 0x57, 0x6a, 0x58, 0x65, 0x28, 0x32, 0x0c, 0x83,
	0x60, 0x15, 0x9c, 0x82, 0x7e, 0x01, 0xdb, 0x5d, 0x3c, 0xed, 0x61, 0x19, 0x29, 0x82, 0xb7, 0xcc,
	0x4c, 0xa8, 0xc1, 0xe9, 0xbc, 0x63, 0x92, 0xea, 0xf6, 0x1b, 0x78, 0x14, 0xfc, 0x52, 0x1e, 0x7b,
	0xf4, 0x28, 0xed, 0x97, 0xf0, 0x28, 0x79, 0x13, 0x66, 0xa7, 0x56, 0xf1, 0xd0, 0x92, 0xe7, 0x97,
	0xe7, 0x7d, 0x79, 0x9f, 0x49, 0x42, 0x99, 0xcc, 0xb2, 0xa9, 0x12, 0xba, 0x86, 0x4a, 0x8b, 0xa4,
	0x56, 0x60, 0x80, 0xdd, 0xd7, 0xbc, 0x96, 0xa2, 0xd2, 0x39, 0xe8, 0x15, 0xe8, 0x44, 0x66, 0x99,
	0xfd, 0x8d, 0xcf, 0x97, 0xb0, 0x04, 0x74, 0x4c, 0xed, 0xca, 0x99, 0xc7, 0x77, 0x6d, 0x83, 0xb5,
	0x16, 0xca, 0xe9, 0x78, 0x4b, 0xe8, 0xe8, 0x0a, 0x78, 0x71, 0x0d, 0x50, 0xa6, 0xbe, 0x2f, 0x3b,
	0xa7, 0xbd, 0x99, 0xd6, 0xc2, 0x04, 0x24, 0x22, 0x93, 0x41, 0xea, 0x04, 0x7b, 0x4a, 0x47, 0x17,
	0x50, 0x96, 0xdc, 0x80, 0xe2, 0xe5, 0x2b, 0x9e, 0x1b, 0x50, 0xc1, 0x49, 0x44, 0x26, 0xbd, 0xf4,
	0x88, 0xb3, 0x87, 0x74, 0x70, 0x25, 0x3f, 0xac, 0x65, 0x21, 0xcd, 0x26, 0xe8, 0xa2, 0xe9, 0x16,
	0xb0, 0x90, 0xd2, 0x4b, 0x51, 0x83, 0x96, 0x66, 0x56, 0x6f, 0x82, 0x53, 0xdc, 0x6e, 0x11, 0x5b,
	0x3d, 0x07, 0xa5, 0xe0, 0x93, 0xdd, 0xee, 0xb9, 0xea, 0x06, 0xd8, 0x6a, 0x1c, 0xe8, 0x5a, 0xc9,
	0x5c, 0x04, 0x7d, 0x57, 0x7d, 0x4b, 0xe2, 0x9f, 0x3e, 0xd2, 0x42, 0x0b, 0xd5, 0x44, 0x1a, 0xd3,
	0x33, 0xb4, 0xd8, 0x8e, 0x04, 0x4b, 0x1a, 0xdd, 0x34, 0xbc, 0x14, 0x15, 0xac, 0x30, 0xd2, 0x20,
	0x6d, 0x11, 0x16, 0xd3, 0xff, 0x51, 0xcd, 0x79, 0xc9, 0xab, 0x5c, 0x60, 0x9e, 0x6e, 0x7a, 0xc0,
	0x1a, 0x8f, 0x4f, 0xe1, 0x43, 0x1d, 0x30, 0x16, 0xd1, 0xa1, 0xab, 0xc1, 0x28, 0x3e, 0x58, 0x1b,
	0xfd, 0x2b, 0x9a, 0xdd, 0x77, 0x9f, 0x5a, 0x28, 0x5e, 0x06, 0xff, 0x45, 0x64, 0x72, 0x96, 0xb6,
	0x48, 0xfc, 0x95, 0xd0, 0x7b, 0x36, 0x76, 0x7b, 0x34, 0xcd, 0x18, 0x3d, 0x5d, 0xf0, 0xf7, 0xee,
	0x34, 0xbb, 0x29, 0xae, 0xed, 0x11, 0x2f, 0xb8, 0xf1, 0x71, 0xbb, 0xa9, 0x13, 0xe8, 0xcc, 0x15,
	0xf8, 0x84, 0xb8, 0x46, 0x67, 0xf1, 0xb1, 0xae, 0x30, 0x92, 0x75, 0x5a, 0x81, 0x54, 0x2a, 0xa9,
	0x31, 0x85, 0xa5, 0x56, 0x20, 0xbd, 0xa9, 0x95, 0xc1, 0xd1, 0x2d, 0xb5, 0x22, 0xfe, 0x4c, 0xe8,
	0xd0, 0x1d, 0x3e, 0x37, 0x12, 0x2a, 0xf6, 0x88, 0xde, 0x79, 0xc3, 0xcb, 0x52, 0x98, 0x59, 0x51,
	0x28, 0xa1, 0xb5, 0xbf, 0x66, 0x87, 0x90, 0xbd, 0xa6, 0xa3, 0x56, 0x91, 0xbb, 0x8f, 0x27, 0x51,
	0x77, 0x32, 0x7c, 0xfe, 0x38, 0xf9, 0xe3, 0x8d, 0x4f, 0x7e, 0xb7, 0xa7, 0x47, 0x0d, 0xe2, 0x97,
	0xc7, 0x4d, 0xff, 0x72, 0xdb, 0x1f, 0xd0, 0xfe, 0x6c, 0x05, 0xeb, 0xca, 0xf8, 0x2f, 0xe4, 0xd5,
	0xfc, 0xe2, 0xdb, 0x2e, 0x24, 0xdb, 0x5d, 0x48, 0x7e, 0xec, 0x42, 0xf2, 0x65, 0x1f, 0x76, 0xb6,
	0xfb, 0xb0, 0xf3, 0x7d, 0x1f, 0x76, 0xde, 0x3e, 0x59, 0x4a, 0xf3, 0x6e, 0x9d, 0x25, 0x39, 0xac,
	0xa6, 0x7e, 0xc0, 0x67, 0x6e, 0xc2, 0xa9, 0x7d, 0x74, 0x37, 0xf8, 0x6f, 0x36, 0xb5, 0xd0, 0x59,
	0x1f, 0x1f, 0xdf, 0x8b, 0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xd7, 0xb3, 0x27, 0x6b, 0xcf, 0x03,
	0x00, 0x00,
}

func (m *LoadPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetPrice != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.AssetPrice))
		i--
		dAtA[i] = 0x30
	}
	if m.BorrowApy != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.BorrowApy))
		i--
		dAtA[i] = 0x28
	}
	if m.DepositApy != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.DepositApy))
		i--
		dAtA[i] = 0x20
	}
	if m.Liquidity != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Liquidity))
		i--
		dAtA[i] = 0x18
	}
	if m.CollatoralFactor != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.CollatoralFactor))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoadUserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoadUserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoadUserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Collateral {
		i--
		if m.Collateral {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x38
	}
	if m.AssetPrice != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.AssetPrice))
		i--
		dAtA[i] = 0x30
	}
	if m.AssetBorrow != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.AssetBorrow))
		i--
		dAtA[i] = 0x28
	}
	if m.AssetDeposit != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.AssetDeposit))
		i--
		dAtA[i] = 0x20
	}
	if m.AssetBalance != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.AssetBalance))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AssetDenom) > 0 {
		i -= len(m.AssetDenom)
		copy(dAtA[i:], m.AssetDenom)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.AssetDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.AssetApy != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.AssetApy))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UserAssetBalances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserAssetBalances) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserAssetBalances) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Uxprt != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Uxprt))
		i--
		dAtA[i] = 0x30
	}
	if m.Uiris != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Uiris))
		i--
		dAtA[i] = 0x28
	}
	if m.Udvpn != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Udvpn))
		i--
		dAtA[i] = 0x20
	}
	if m.Ucro != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Ucro))
		i--
		dAtA[i] = 0x18
	}
	if m.Uatom != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Uatom))
		i--
		dAtA[i] = 0x10
	}
	if m.Uakt != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Uakt))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Liquidation) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Liquidation) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Liquidation) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiquidationAsset) > 0 {
		for iNdEx := len(m.LiquidationAsset) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidationAsset[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintResponse(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.WalletAddress) > 0 {
		i -= len(m.WalletAddress)
		copy(dAtA[i:], m.WalletAddress)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.WalletAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LiquidationAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidationAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidationAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintResponse(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Asset) > 0 {
		i -= len(m.Asset)
		copy(dAtA[i:], m.Asset)
		i = encodeVarintResponse(dAtA, i, uint64(len(m.Asset)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintResponse(dAtA []byte, offset int, v uint64) int {
	offset -= sovResponse(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LoadPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	if m.CollatoralFactor != 0 {
		n += 1 + sovResponse(uint64(m.CollatoralFactor))
	}
	if m.Liquidity != 0 {
		n += 1 + sovResponse(uint64(m.Liquidity))
	}
	if m.DepositApy != 0 {
		n += 1 + sovResponse(uint64(m.DepositApy))
	}
	if m.BorrowApy != 0 {
		n += 1 + sovResponse(uint64(m.BorrowApy))
	}
	if m.AssetPrice != 0 {
		n += 1 + sovResponse(uint64(m.AssetPrice))
	}
	return n
}

func (m *LoadUserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetApy != 0 {
		n += 1 + sovResponse(uint64(m.AssetApy))
	}
	l = len(m.AssetDenom)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	if m.AssetBalance != 0 {
		n += 1 + sovResponse(uint64(m.AssetBalance))
	}
	if m.AssetDeposit != 0 {
		n += 1 + sovResponse(uint64(m.AssetDeposit))
	}
	if m.AssetBorrow != 0 {
		n += 1 + sovResponse(uint64(m.AssetBorrow))
	}
	if m.AssetPrice != 0 {
		n += 1 + sovResponse(uint64(m.AssetPrice))
	}
	if m.Collateral {
		n += 2
	}
	return n
}

func (m *UserAssetBalances) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Uakt != 0 {
		n += 1 + sovResponse(uint64(m.Uakt))
	}
	if m.Uatom != 0 {
		n += 1 + sovResponse(uint64(m.Uatom))
	}
	if m.Ucro != 0 {
		n += 1 + sovResponse(uint64(m.Ucro))
	}
	if m.Udvpn != 0 {
		n += 1 + sovResponse(uint64(m.Udvpn))
	}
	if m.Uiris != 0 {
		n += 1 + sovResponse(uint64(m.Uiris))
	}
	if m.Uxprt != 0 {
		n += 1 + sovResponse(uint64(m.Uxprt))
	}
	return n
}

func (m *Liquidation) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.WalletAddress)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	if len(m.LiquidationAsset) > 0 {
		for _, e := range m.LiquidationAsset {
			l = e.Size()
			n += 1 + l + sovResponse(uint64(l))
		}
	}
	return n
}

func (m *LiquidationAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Asset)
	if l > 0 {
		n += 1 + l + sovResponse(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovResponse(uint64(m.Amount))
	}
	return n
}

func sovResponse(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozResponse(x uint64) (n int) {
	return sovResponse(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LoadPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollatoralFactor", wireType)
			}
			m.CollatoralFactor = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CollatoralFactor |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			m.Liquidity = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Liquidity |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DepositApy", wireType)
			}
			m.DepositApy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DepositApy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorrowApy", wireType)
			}
			m.BorrowApy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorrowApy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetPrice", wireType)
			}
			m.AssetPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetPrice |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoadUserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoadUserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoadUserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetApy", wireType)
			}
			m.AssetApy = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetApy |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetBalance", wireType)
			}
			m.AssetBalance = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetBalance |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetDeposit", wireType)
			}
			m.AssetDeposit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetDeposit |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetBorrow", wireType)
			}
			m.AssetBorrow = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetBorrow |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetPrice", wireType)
			}
			m.AssetPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetPrice |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Collateral", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Collateral = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserAssetBalances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserAssetBalances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserAssetBalances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uakt", wireType)
			}
			m.Uakt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uakt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uatom", wireType)
			}
			m.Uatom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uatom |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ucro", wireType)
			}
			m.Ucro = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ucro |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Udvpn", wireType)
			}
			m.Udvpn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Udvpn |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uiris", wireType)
			}
			m.Uiris = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uiris |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uxprt", wireType)
			}
			m.Uxprt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Uxprt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Liquidation) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Liquidation: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Liquidation: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidationAsset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidationAsset = append(m.LiquidationAsset, &LiquidationAsset{})
			if err := m.LiquidationAsset[len(m.LiquidationAsset)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidationAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidationAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidationAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Asset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthResponse
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthResponse
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Asset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipResponse(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthResponse
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipResponse(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowResponse
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowResponse
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthResponse
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupResponse
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthResponse
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthResponse        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowResponse          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupResponse = fmt.Errorf("proto: unexpected end of group")
)
